apply plugin: 'war'
apply plugin: 'appengine'
//apply from: "${rootProject.projectDir}/config/java/webinflib.gradle"
//apply from: "${rootProject.projectDir}/config/java/smartjava.gradle"
//apply from: "${rootProject.projectDir}/config/gradle/gcloud.gradle"

ext {
    gaeVersion = '1.9.17';
    gaeSharedVersion = '1.8.1-SNAPSHOT'
    googleApiVersion = '1.17.0-rc'
    guavaVersion = '14.0.1';
    guiceVersion = '3.0';
    guiceSharedVersion = '3.0-SNAPSHOT';
    gsonVersion = '2.2.4';
    httpClientVersion = '4.2.2'
    injectVersion = '1';
    jerseyVersion = '1.17.1';
    jerseySharedVersion = '1.17.1-SNAPSHOT';
    jodaTimeVersion = '2.2';
    servletApiVersion = '2.5';
    slf4jVersion = '1.6.6';
    thymeleafVersion = '2.0.16';
    objectifyVersion = '4.0rc1'
    apacheCommonsVersion = '3.1'

}

configurations {
    all*.exclude group: "org.mortbay.jetty"

    runtime.exclude group: "org.sonatype.sisu.inject", module: "cglib"
    runtime.exclude group: "commons-logging", module: "commons-logging"
    runtime.exclude group: "asm", module: "asm"
    runtime.exclude group: "org.javassist", module: "javassist"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "javax.ws.rs:jsr311-api:1.1.1"


    compile "org.slf4j:slf4j-jdk14:1.7.5"
//    compile "org.apache.httpcomponents:httpclient:$httpClientVersion"
//    compile "org.apache.commons:commons-io:1.3.2"
//    compile "commons-lang:commons-lang:2.6"
    /*
    compile("org.jsondoc:jsondoc-core:1.0.1")
    runtime("org.reflections:reflections:0.9.8")


    */

    /*  use the jsr @Inject annotations for better standards portability. */
    compile "javax.annotation:jsr250-api:1.0"


    /*
    *
    * Configure the App Engine Environment.
    *
    */

    // App Engine SDK - for the Gradle Appengine Plugin
    appengineSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"

    //App Engine java dependencies
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-tools-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-api-labs:$gaeVersion"

    /* Required for AppStats*/
    compile "com.google.appengine:appengine-api-labs:$gaeVersion"

    /**
     * Dependencies for Google Guice
     */
    compile "com.google.appengine:appengine-tools-sdk:$gaeVersion"

    compile "com.google.guava:guava:$guavaVersion";
    compile "com.google.inject.extensions:guice-servlet:$guiceVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "com.google.inject:guice:$guiceVersion";
    compile 'javax.servlet:servlet-api:2.5';

    /**
     * JAX RS WS depedencies for Jersey.
     */
    compile "com.sun.jersey:jersey-core:$jerseyVersion"
    compile "com.sun.jersey:jersey-client:$jerseyVersion"
    compile "com.sun.jersey:jersey-server:$jerseyVersion"
    compile "com.sun.jersey:jersey-servlet:$jerseyVersion"
    compile "javax.servlet:servlet-api:$servletApiVersion"
    compile "org.thymeleaf:thymeleaf:$thymeleafVersion"

    /* add Google Guice as a dependency injection engine for Jersey */
    compile "com.sun.jersey.contribs:jersey-guice:$jerseyVersion"


    compile "com.google.http-client:google-http-client-gson:$googleApiVersion"

//
//    compile "org.slf4j:jcl-over-slf4j:1.7.5"
//    compile "commons-codec:commons-codec:1.8"

//
//
//
//
//
//    compile("com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute:1.2") { transitive = false }
//    compile "joda-time:joda-time:$jodaTimeVersion"
//    compile "com.google.code.gson:gson:$gsonVersion"
//    compile( "com.smarttech:appengine-shared:$gaeSharedVersion") {
//        exclude group: "com.google.appengine", module: "appengine-tools-sdk"
//    }
//



}

appengine {
    downloadSdk = true;



    appcfg {
        email = 'pwilson@smarttech.com'
        password = 'Sm@rt123'
        app {
            id = "smart-metricsproxy-dev"
        }

        if( project.hasProperty("appId") ) {
            app.id = project.appId
        }

        if( project.hasProperty("email")) {
            email = project.email
        }

        if( project.hasProperty("password")) {
            password = project.password
        }
    }
}